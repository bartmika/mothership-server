// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mothership_server

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MothershipClient is the client API for Mothership service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MothershipClient interface {
	Register(ctx context.Context, in *RegistrationReq, opts ...grpc.CallOption) (*RegistrationRes, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenRes, error)
	InsertTimeSeriesDatum(ctx context.Context, in *TimeSeriesDatumReq, opts ...grpc.CallOption) (*empty.Empty, error)
	InsertTimeSeriesData(ctx context.Context, opts ...grpc.CallOption) (Mothership_InsertTimeSeriesDataClient, error)
	InsertBulkTimeSeriesData(ctx context.Context, in *BulkTimeSeriesDataReq, opts ...grpc.CallOption) (*empty.Empty, error)
	SelectBulkTimeSeriesData(ctx context.Context, in *FilterReq, opts ...grpc.CallOption) (*SelectBulkRes, error)
}

type mothershipClient struct {
	cc grpc.ClientConnInterface
}

func NewMothershipClient(cc grpc.ClientConnInterface) MothershipClient {
	return &mothershipClient{cc}
}

func (c *mothershipClient) Register(ctx context.Context, in *RegistrationReq, opts ...grpc.CallOption) (*RegistrationRes, error) {
	out := new(RegistrationRes)
	err := c.cc.Invoke(ctx, "/proto.Mothership/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mothershipClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/proto.Mothership/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mothershipClient) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenRes, error) {
	out := new(RefreshTokenRes)
	err := c.cc.Invoke(ctx, "/proto.Mothership/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mothershipClient) InsertTimeSeriesDatum(ctx context.Context, in *TimeSeriesDatumReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Mothership/InsertTimeSeriesDatum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mothershipClient) InsertTimeSeriesData(ctx context.Context, opts ...grpc.CallOption) (Mothership_InsertTimeSeriesDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mothership_ServiceDesc.Streams[0], "/proto.Mothership/InsertTimeSeriesData", opts...)
	if err != nil {
		return nil, err
	}
	x := &mothershipInsertTimeSeriesDataClient{stream}
	return x, nil
}

type Mothership_InsertTimeSeriesDataClient interface {
	Send(*TimeSeriesDatumReq) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type mothershipInsertTimeSeriesDataClient struct {
	grpc.ClientStream
}

func (x *mothershipInsertTimeSeriesDataClient) Send(m *TimeSeriesDatumReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mothershipInsertTimeSeriesDataClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mothershipClient) InsertBulkTimeSeriesData(ctx context.Context, in *BulkTimeSeriesDataReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Mothership/InsertBulkTimeSeriesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mothershipClient) SelectBulkTimeSeriesData(ctx context.Context, in *FilterReq, opts ...grpc.CallOption) (*SelectBulkRes, error) {
	out := new(SelectBulkRes)
	err := c.cc.Invoke(ctx, "/proto.Mothership/SelectBulkTimeSeriesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MothershipServer is the server API for Mothership service.
// All implementations must embed UnimplementedMothershipServer
// for forward compatibility
type MothershipServer interface {
	Register(context.Context, *RegistrationReq) (*RegistrationRes, error)
	Login(context.Context, *LoginReq) (*LoginRes, error)
	RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenRes, error)
	InsertTimeSeriesDatum(context.Context, *TimeSeriesDatumReq) (*empty.Empty, error)
	InsertTimeSeriesData(Mothership_InsertTimeSeriesDataServer) error
	InsertBulkTimeSeriesData(context.Context, *BulkTimeSeriesDataReq) (*empty.Empty, error)
	SelectBulkTimeSeriesData(context.Context, *FilterReq) (*SelectBulkRes, error)
	mustEmbedUnimplementedMothershipServer()
}

// UnimplementedMothershipServer must be embedded to have forward compatible implementations.
type UnimplementedMothershipServer struct {
}

func (UnimplementedMothershipServer) Register(context.Context, *RegistrationReq) (*RegistrationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMothershipServer) Login(context.Context, *LoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMothershipServer) RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedMothershipServer) InsertTimeSeriesDatum(context.Context, *TimeSeriesDatumReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTimeSeriesDatum not implemented")
}
func (UnimplementedMothershipServer) InsertTimeSeriesData(Mothership_InsertTimeSeriesDataServer) error {
	return status.Errorf(codes.Unimplemented, "method InsertTimeSeriesData not implemented")
}
func (UnimplementedMothershipServer) InsertBulkTimeSeriesData(context.Context, *BulkTimeSeriesDataReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertBulkTimeSeriesData not implemented")
}
func (UnimplementedMothershipServer) SelectBulkTimeSeriesData(context.Context, *FilterReq) (*SelectBulkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectBulkTimeSeriesData not implemented")
}
func (UnimplementedMothershipServer) mustEmbedUnimplementedMothershipServer() {}

// UnsafeMothershipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MothershipServer will
// result in compilation errors.
type UnsafeMothershipServer interface {
	mustEmbedUnimplementedMothershipServer()
}

func RegisterMothershipServer(s grpc.ServiceRegistrar, srv MothershipServer) {
	s.RegisterService(&Mothership_ServiceDesc, srv)
}

func _Mothership_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MothershipServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mothership/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MothershipServer).Register(ctx, req.(*RegistrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mothership_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MothershipServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mothership/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MothershipServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mothership_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MothershipServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mothership/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MothershipServer).RefreshToken(ctx, req.(*RefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mothership_InsertTimeSeriesDatum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeSeriesDatumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MothershipServer).InsertTimeSeriesDatum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mothership/InsertTimeSeriesDatum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MothershipServer).InsertTimeSeriesDatum(ctx, req.(*TimeSeriesDatumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mothership_InsertTimeSeriesData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MothershipServer).InsertTimeSeriesData(&mothershipInsertTimeSeriesDataServer{stream})
}

type Mothership_InsertTimeSeriesDataServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*TimeSeriesDatumReq, error)
	grpc.ServerStream
}

type mothershipInsertTimeSeriesDataServer struct {
	grpc.ServerStream
}

func (x *mothershipInsertTimeSeriesDataServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mothershipInsertTimeSeriesDataServer) Recv() (*TimeSeriesDatumReq, error) {
	m := new(TimeSeriesDatumReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Mothership_InsertBulkTimeSeriesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkTimeSeriesDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MothershipServer).InsertBulkTimeSeriesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mothership/InsertBulkTimeSeriesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MothershipServer).InsertBulkTimeSeriesData(ctx, req.(*BulkTimeSeriesDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mothership_SelectBulkTimeSeriesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MothershipServer).SelectBulkTimeSeriesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mothership/SelectBulkTimeSeriesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MothershipServer).SelectBulkTimeSeriesData(ctx, req.(*FilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Mothership_ServiceDesc is the grpc.ServiceDesc for Mothership service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mothership_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Mothership",
	HandlerType: (*MothershipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Mothership_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Mothership_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Mothership_RefreshToken_Handler,
		},
		{
			MethodName: "InsertTimeSeriesDatum",
			Handler:    _Mothership_InsertTimeSeriesDatum_Handler,
		},
		{
			MethodName: "InsertBulkTimeSeriesData",
			Handler:    _Mothership_InsertBulkTimeSeriesData_Handler,
		},
		{
			MethodName: "SelectBulkTimeSeriesData",
			Handler:    _Mothership_SelectBulkTimeSeriesData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InsertTimeSeriesData",
			Handler:       _Mothership_InsertTimeSeriesData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/mothership.proto",
}
